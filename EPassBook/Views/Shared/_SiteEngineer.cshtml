@model EPassBook.Models.InstallmentDetailsViewModel
@{
    if (ViewBag.Message != null)
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    if (ViewBag.Error != null)
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
}
<style>
    #errmsgB, #errmsgL, .errmsg {
        color: red;
    }
</style>

<div id="siteengineer">

    @if (!Model.IsRecommended)
    {
    <section class="content" id="firstDiv">
        <div class="row">
            <!-- left column -->
            <div class="col-md-12">
                <div class="box box-primary">
                    <div class="box-header with-border">

                    </div>
                    <div class="box-body">
                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.Label("Select Comment", "Select Comment", htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-9">
                                    <select class="selectpicker  form-control" multiple data-actions-box="true" data-live-search="false">
                                        <option>Centre line is not proper</option>
                                        <option>Foundation state to rest foundation in not hard</option>
                                        <option>Column footing reinforcement is not as per design/properly laid</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.Label("Comment", htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-9">
                                    @Html.TextBoxFor(model => model.FirstComment, htmlAttributes: new { @class = "form-control", @id = "txtFirstComment" })
                                    <div style="height:20px">
                                        <span id="commentError" class="errmsg"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-4 col-md-10">
                                <input type="button" value="Recommend" id="recommend" class="btn btn-primary" />
                                <input type="button" value="Reject" id="reject" class="btn btn-danger" />
                            </div>
                        </div>
                        <br />
                    </div>
                </div>
            </div>
        </div>
    </section>
    }

    <section class="content" id="secondDiv">
        <div class="row">
            <!-- left column -->
            <div class="col-md-12">
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h4>Site Engineer</h4>
                    </div>
                    @using (Html.BeginForm("SiteEngineer", "WorkFlow", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal" }))
                    {
                    <div class="box-body">
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-horizontal" id="secondDiv">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group" style="display:none">
                                @Html.LabelFor(model => model.InstallmentId, "InstallmentID", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.HiddenFor(m => m.InstallmentId)
                                </div>
                            </div>

                            <div class="form-group" style="display:none">
                                @Html.LabelFor(model => model.BeneficiaryId, "BeneficiaryId", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.HiddenFor(m => m.BeneficiaryId)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.BeneficiaryAmnt, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.BeneficiaryAmnt, new { htmlAttributes = new { @class = "form-control", @id = "txtBenAmnt" } })&nbsp;<span id="errmsgB"></span>
                                    @Html.ValidationMessageFor(model => model.BeneficiaryAmnt, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-6">
                                    @Html.DisplayFor(model => model.beniInRupees, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                    <label id="lblBeniAmntRupees"></label>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("State Assistance", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <div class="checkbox icheck">
                                        @Html.RadioButtonFor(model => model.IsCentreAmnt, false, new { id = "isState" })State Assistance
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.Label("Central Assistance", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <div class="checkbox icheck">
                                        @Html.RadioButtonFor(model => model.IsCentreAmnt, true, new { id = "isCentre" })Central Assistance
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Subsidy Amount", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-4">
                                    @Html.EditorFor(model => model.LoanAmnt, new { htmlAttributes = new { @class = "form-control", @id = "txtLAmnt" } })&nbsp;<span id="errmsgL"></span>
                                    @Html.ValidationMessageFor(model => model.LoanAmnt, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-6">
                                    @Html.DisplayFor(model => model.lInRupees, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                    <label id="lblAmntLRupees"></label>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.Label("Transaction Type", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-xs-12 col-sm-4 col-md-4 col-lg-4">
                                    @Html.DropDownListFor(model => model.TransactionType, new SelectList(new List<object>
                                        {
                                        new{ value="RTGS", text="RTGS" },
                                        new{ value="IMPS", text="IMPS" },
                                        new{ value="NEFT", text="NEFT" },
                                        new{ value="Check", text="Check" },
                                        new{ value="Cash", text="Cash" },
                                        },
                                        "value",
                                        "text"),"Select Items",
                                        new {  @class = "form-control"})
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-xs-5 col-sm-5 col-md-5 col-lg-5" style="text-align-last:end">
                                    <strong>Via RTGS/DBT to the beneficiary for the plan as first instalment after </strong>
                                </div>
                                <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
                                    @Html.DropDownListFor(model => model.ConstructionLevel, new SelectList(new List<object>
                                        {
                                        new{ value="Not Started", text="Not Started" },
                                        new{ value="Digging", text="Digging" },
                                        new{ value="Plinth Level", text="Plinth Level" },
                                        new{ value="Lintel Level", text="Lintel Level" },
                                        new{ value="Roof Level", text="Roof Level" },
                                        new{ value="Finishing/Completion", text="Finishing/Completion" },
                                        },
                                        "value",
                                        "text"),"Select Items",
                                        new {  @class = "form-control"})
                                </div>
                                <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3">
                                    <p>
                                        <strong> of the foundation.</strong>
                                    </p>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model._Comments, "Comments", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model._Comments, htmlAttributes: new { @class = "form-control", @row = 5 })
                                    @Html.ValidationMessageFor(model => model._Comments, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ModifiedBy, "Upload Photo", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-8">
                                    <img id="imgsite" src="@Model.Photo" alt="your image" class="img-thumbnail col-md-12" style="height:200px" />
                                    <input type="file" value="Upload" id="imguploadsiteeng" name="imguploadsiteeng" onchange="readURL(this, 'imgsite')" class="btn btn-primary col-md-5 col-sm-5 col-xs-5" />
                                    <input type="button" id="btnimg1cencal" onclick="removeimg('imgsite','imguploadsiteeng')" value="Cancel" class="btn btn-danger col-md-3 col-sm-3 col-xs-3 pull-right" />
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="checkbox icheck col-md-offset-2 col-md-10">
                                    @Html.CheckBoxFor(model => model.Sign, new { @class = "minimal", id = "SiteEngineer" }) @Html.Label("Site Engineer")
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <label id="lblmsg" class="text-danger"></label>
                                </div>
                            </div>

                            <div class="form-group">
                                <button id="btnGenOTP" type="button" class="btn btn-primary" />
                            </div>

                            <div class="form-group" id="otpDiv" visible="false">
                                <div class="col-xs-12 col-sm-2 col-md-2 col-lg-2">
                                    <label id="lblotp">Enter OTP: </label>
                                </div>
                                    <div class="col-md-4">
                                        @Html.TextBoxFor(model => model.OTP, htmlAttributes: new { @class = "form-control", @maxlength = "4", id = "txtOtp" })
                                        @Html.ValidationMessageFor(model => model.OTP, "", new { @class = "text-danger" })
                                        <label id="lblOTPError" class="text-danger"></label>
                                    </div>
                            </div>

                            <div class="box-footer" id="btnSubmit">
                                <input type="submit" value="Send to Project Engineer" onclick="return validation();" class="btn btn-primary" />
                            </div>
                        </div>

                    </div>
                    }
                </div>
            </div>
        </div>
    </section>
</div>

@if (!EPassBook.Helper.AuthorizationForView.IsAuthorize(EPassBook.Helper.Common.SiteEngineer))
{
<script type="text/javascript">
        $(document).ready(function () {
            $('#siteengineer').find(':input').prop('disabled', true);
        });
</script>
}

@if (ViewBag.Message != null)
{
<script type="text/javascript">
        window.onload = function () {
            $('#firstDiv').hide();
            alert("submited successfully");
            window.location.href = "/WorkFlow/Index/";
        };
</script>
}

<script type="text/javascript">

    $(document).ready(function ()
    {
        $("#btnGenOTP").text('Generate OTP');
        $("#otpDiv").hide();
        $('#btnSubmit').hide();

        $("#btnGenOTP").on("click", function ()
        {
             var installmentId = '@Model.InstallmentId';
            AjaxWithParameter(installmentId);
        });

        $("#txtOtp").keyup(function (e) {
            KeyPressEvent(e);
        });

        $('input').iCheck({
            checkboxClass: 'icheckbox_square-blue',
            radioClass: 'iradio_square-blue',
            increaseArea: '20%' /* optional */
        });

        var check = '@Model.IsRecommended';
        //TODO
        check = check.toLowerCase();
        debugger;
        if (check == 'true')
        {
            $('#secondDiv').show();
            $('#firstDiv').hide();
        }
        else
        {
            $('#secondDiv').hide();
            $('#firstDiv').show();
        }
        $('select').selectpicker();
        $(".selectpicker").change(function ()
        {
            var countries = [];
            $.each($(".selectpicker option:selected"), function () {
                countries.push($(this).val());
            });
            $("#txtFirstComment").val(countries.join(", "));
        });

        $("#recommend").click(function ()
        {
            var comment = $("#txtFirstComment").val();
            var installmentId=@Model.InstallmentId;
            if (comment == '') {
                $("#commentError").html("Comment is required").show().fadeOut("slow");
                return false;
            }
            var installmentDetailViewModel = {};
            installmentDetailViewModel.FirstComment = comment;
            installmentDetailViewModel.installmentId = installmentId;
            $.ajax({
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                url: "/WorkFlow/Recommend",
                data: JSON.stringify(installmentDetailViewModel),
                success: (function (response){
                    alert('success');
                    $('#secondDiv').show();
                    $('#firstDiv').hide();
                }),
                failure: (function (response) {
                    alert('failure');
                    return false;
                }),
                error: (function (xhr, textStatus, errorThrown)
                {
                    if (textStatus != "error"){
                        alert(textStatus);
                        $('#secondDiv').show();
                        $('#firstDiv').hide();
                    }
                    else if (xhr.status === 401 || xhr.status === 403){
                        alert(errorThrown);
                        window.location.href = "/WorkFlow/Index/";
                    }
                })
            });
        });

        $("#reject").click(function ()
        {
            var comment = $("#txtFirstComment").val();
            var installmentId = @Model.InstallmentId;
            if (comment == '')
            {
                $("#commentError").html("Comment is required").show().fadeOut("slow");
                return false;
            }
            var installmentDetailViewModel = {};
            installmentDetailViewModel.FirstComment = comment;
            installmentDetailViewModel.installmentId = installmentId;
            $.ajax({
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                url: "/WorkFlow/Reject",
                data: JSON.stringify(installmentDetailViewModel),
                success: (function (response) {
                    alert('Beneficiary Rejected');
                    window.location.href = "/WorkFlow/Index/";
                }),
                failure: (function (response) {
                    alert('failure');
                    return false;
                }),
                error: (function (xhr, textStatus, errorThrown) {
                    if (textStatus != "error") {
                        alert(textStatus);
                        $('#firstDiv').show();
                        $('#secondDiv').hide();
                    }
                    else if (xhr.status === 401 || xhr.status === 403) {
                        alert(errorThrown);
                        window.location.href = "/WorkFlow/Index/";
                    }
                })
            });
        });

        $("#txtBenAmnt").keyup(function ()
        {
            $("#lblBeniAmntRupees").text('');
            var amnt = $(this).val();
            $.ajax({

                type: "POST",
                url: '/WorkFlow/ToWords?number=' + amnt,
                success: (function (response) {
                    $("#lblBeniAmntRupees").text(response);
                })
            });
        });

        $("#txtLAmnt").keyup(function () {
            $("#lblAmntLRupees").text('');
            var amnt = $(this).val();
            $.ajax(
                {
                    type: "POST",
                    url: '/WorkFlow/ToWords?number=' + amnt,
                    success: (function (response) {
                        $("#lblAmntLRupees").text(response);
                    })
                });
        });

        //for numbers validations only
        //called when key is pressed in textbox
        $("#txtBenAmnt").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#errmsgB").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });
        $("#txtLAmnt").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#errmsgL").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });

        $("#SiteEngineer").change(function () {
            $("#lblmsg_PM").text("");
        });
    });

    function validation()
    {
        debugger;
        var isOTPverfied = false;
        var installmentId = '@Model.InstallmentId';
        var Otp = $("#txtOtp").val();

        debugger
        if ($("#isState").is(":checked") || $("#isCentre").is(":checked")) {
        }
        else {
            $("#lblmsg").text("Please select State Assistance or Center Assistance");
            return false;
        }
        if ($("#txtLAmnt").val().trim() == "" || $("#txtLAmnt").val() == "0.00" || $("#txtLAmnt").val() == "0") {
            $("#lblmsg").text("Please Enter Loan Amount");
            return false;
        }
        if (!$("#SiteEngineer").is(":checked")) {
            
            $("#lblmsg").text("Please sign in to confirm your submission");
            return false;
        }
        if ($("#ConstructionLevel").val() =='') {
            $("#lblmsg").text("Please select construction level.");
            return false;
        }

        if (Otp == '') {
            $("#lblOTPError").text("Please enter OTP");
            return false;
        }
        if ($("#TransactionType").val() == '') {
            $("#lblmsg").text("Please select transaction type.");
            return false;
        }
        var isOTPverfied = ValidateOTP(installmentId, Otp);
        if (isOTPverfied != 'True') {
            alert("Wrong OTP");
            return false;
        }
        return true;
    }

    function readURL(input, id) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            if (id == 'imgsite') {
                reader.onload = function (e) {
                    $('#imgsite')
                        .attr('src', e.target.result);
                };
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

    function removeimg(img, fileupld) {
        document.getElementById(img).removeAttribute('src');
        document.getElementById(fileupld).value = "";
    }

</script>
